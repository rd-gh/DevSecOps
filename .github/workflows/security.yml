name: .NET Security Pipeline

on:
  push:
    branches: [main]
    paths:
      - 'S1A/**'
  pull_request:
    branches: [main]
    paths:
      - 'S1A/**'

permissions:
  contents: read
  security-events: write

jobs:
  semgrep:
    name: Semgrep SAST (C#)
    runs-on: ubuntu-latest
    continue-on-error: false  # Fail job if semgrep exits non-zero
    steps:
      - uses: actions/checkout@v4

      - name: Run Semgrep (capture exit but don't fail yet)
        id: semgrep_scan
        continue-on-error: true
        uses: returntocorp/semgrep-action@v1
        with:
          entryPoint: semgrep
          args: >
            --config=https://semgrep.dev/p/csharp
            --config=https://semgrep.dev/p/owasp-top-ten
            --config=https://semgrep.dev/p/security-audit
            --sarif
            --output=semgrep-results.sarif
            --error

      - name: Upload SARIF to GitHub
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif

      - name: Fail if Semgrep found issues
        if: steps.semgrep_scan.outcome == 'failure'
        run: |
          echo "‚ùå Semgrep found security issues."
          exit 1

  dependency-check:
    name: OWASP Dependency Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        id: setup-java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Run OWASP Dependency-Check with SARIF output
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "SecurityDemo"
          path: "./S1A"
          format: "SARIF"
          out: "dependency-report"
        env:
          JAVA_HOME: ${{ steps.setup-java.outputs.path }}

      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: dependency-report/dependency-check-report.sarif

  gitleaks:
    name: Secret Scan (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITLEAKS_LICENSE_KEY: ${{ secrets.GITLEAKS_LICENSE_KEY }}

  dotnet-lint:
    name: Linting with dotnet-format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - run: dotnet tool install -g dotnet-format
      - run: dotnet-format S1A/SecurityDemo.csproj --check --verbosity diagnostic